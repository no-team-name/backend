name: Build and Deploy

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 소스 코드 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Docker Buildx 설정 (멀티플랫폼 빌드 지원)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 3. Docker Hub 로그인
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 4. Docker 이미지 빌드 및 푸시
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ secrets.DOCKERHUB_REPOSITORY }}:latest

      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            mkdir -p /home/ubuntu/config
            echo "${{ secrets.APPLICATION_YML }}" | sed 's/\\n/\n/g' > /home/ubuntu/config/application.yml
            chmod 600 /home/ubuntu/config/application.yml
            # 중복 실행 방지를 위해 기존 컨테이너 종료 및 삭제 (컨테이너 이름: my-app)
            sudo docker stop my-app || true
            sudo docker rm my-app || true
            # 최신 이미지 풀
            sudo docker pull ${{ secrets.DOCKERHUB_REPOSITORY }}:latest
            # 새 컨테이너 실행 (예: 호스트의 8080 포트를 컨테이너의 8080 포트로 매핑)
            sudo docker run -d --name my-app -p 8080:8080 ${{ secrets.DOCKERHUB_REPOSITORY }}:latest
